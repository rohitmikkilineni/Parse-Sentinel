import re

# GUI-based key order (name replaced by id)
DESIRED_KEY_ORDER = [
    "display_name",
    "description",
    "id",
    "log_analytics_workspace_id",
    "severity",
    "tactics"
]

def add_dash_to_heredocs(text: str) -> str:
    return re.sub(r'(<<)([A-Z]+)', r'\1-\2', text)

def indent_heredoc_closers(lines):
    result = []
    heredoc_indent = None
    heredoc_tag = None
    inside_heredoc = False

    heredoc_start_pattern = re.compile(r'^(\s*[a-zA-Z0-9_]+\s*=\s*<<-?)([A-Z]+)')

    for line in lines:
        if not inside_heredoc:
            match = heredoc_start_pattern.search(line)
            if match:
                heredoc_tag = match.group(2)
                heredoc_indent = re.match(r'^(\s*)', line).group(1)
                inside_heredoc = True
            result.append(line)
        else:
            if line.strip() == heredoc_tag:
                result.append(f"{heredoc_indent}{heredoc_tag}")
                inside_heredoc = False
                heredoc_tag = None
                heredoc_indent = None
            else:
                result.append(line)
    return result

def align_block_kv(lines):
    """
    Align all key=value lines within contiguous blocks of key-value assignments (handles nested too).
    """
    result = []
    group = []
    kv_pattern = re.compile(r'^(\s*)([a-zA-Z0-9_]+)\s*=\s*(.+)$')

    def flush_group():
        if not group:
            return
        max_key_len = max(len(k[1]) for k in group)
        for indent, key, val in group:
            padding = ' ' * (max_key_len - len(key))
            result.append(f"{indent}{key}{padding} = {val}")
        group.clear()

    for line in lines:
        match = kv_pattern.match(line)
        if match:
            group.append((match.group(1), match.group(2), match.group(3).strip()))
        else:
            flush_group()
            result.append(line)
    flush_group()
    return result

def reorder_keys_in_block(block: str) -> str:
    lines = block.splitlines()
    kv_pattern = re.compile(r'^(\s*)([a-zA-Z0-9_]+)\s*=\s*(.+)$')

    kv_lines = {}
    other_lines = []

    name_key = None
    name_value = None
    insert_indent = "  "

    for line in lines:
        match = kv_pattern.match(line)
        if match:
            indent, key, value = match.groups()
            if key == "name":
                name_value = value.strip()
                insert_indent = indent
                continue  # Remove "name"
            kv_lines[key] = (indent, key, value.strip())
        else:
            other_lines.append(line)

    if name_value:
        kv_lines["id"] = (insert_indent, "id", name_value)

    max_key_len = max((len(k) for k in kv_lines), default=0)
    formatted_lines = []

    for key in DESIRED_KEY_ORDER:
        if key in kv_lines:
            indent, k, v = kv_lines[key]
            padding = ' ' * (max_key_len - len(k))
            formatted_lines.append(f"{indent}{k}{padding} = {v}")

    for key in kv_lines:
        if key not in DESIRED_KEY_ORDER:
            indent, k, v = kv_lines[key]
            padding = ' ' * (max_key_len - len(k))
            formatted_lines.append(f"{indent}{k}{padding} = {v}")

    formatted_lines.extend(other_lines)
    return '\n'.join(formatted_lines)

def format_tf_file(filepath: str):
    with open(filepath, 'r') as f:
        content = f.read()

    # Step 1: Fix heredoc start tags
    updated = add_dash_to_heredocs(content)

    # Step 2: Reorder GUI keys and replace "name" with "id"
    blocks = re.split(r'(?<=})\n', updated)
    reordered_blocks = [reorder_keys_in_block(block) for block in blocks]
    combined = '\n'.join(reordered_blocks)

    # Step 3: Break into lines
    lines = combined.splitlines()

    # Step 4: Indent heredoc closers
    lines = indent_heredoc_closers(lines)

    # Step 5: Align key = value inside all blocks
    lines = align_block_kv(lines)

    # Step 6: Write final output
    with open(filepath, 'w') as f:
        f.write('\n'.join(lines))

    print("âœ… Fully aligned nested blocks, GUI field order, heredocs, and id replacement done.")

if __name__ == "__main__":
    format_tf_file("sentinel.tf")
