import re
from pathlib import Path

def add_dash_to_heredocs(text: str) -> str:
    # Replace <<WORD with <<-WORD (only at assignment points)
    return re.sub(r'(<<)([A-Z]+)', r'\1-\2', text)

def format_block(block: str) -> str:
    lines = block.splitlines()
    pairs = []
    i = 0
    kv_pattern = re.compile(r'^(\s*)([a-zA-Z0-9_]+)\s*=\s*(.*)$')  # Update to [a-zA-Z0-9_-]+ if keys have hyphens

    while i < len(lines):
        match = kv_pattern.match(lines[i])
        if match:
            indent, key, value = match.groups()
            value = value.strip()
            pair = {'indent': indent, 'key': key, 'value_lines': [value]}
            if value.startswith('<<-') or value.startswith('<<'):
                if value.startswith('<<') and not value.startswith('<<-'):
                    delim = value[2:]
                    pair['value_lines'] = ['<<-' + delim]
                else:
                    delim = value[3:]
                    pair['value_lines'] = [value]
                content = []
                i += 1
                while i < len(lines) and lines[i].strip() != delim:
                    content.append(lines[i])
                    i += 1
                if i < len(lines) and lines[i].strip() == delim:
                    pair['content'] = content
                    pair['closing'] = delim
                    i += 1
                else:
                    # Handle missing closing (error, but append as-is for robustness)
                    pairs.append(pair)
                    continue
            pairs.append(pair)
        else:
            # Non-kv lines (e.g., comments) appended as-is, but may disrupt if inside heredoc
            if pairs:  # Append to last pair if in content, but simple: skip or append standalone
                lines[i]  # For now, skip non-kv outside pairs
            i += 1

    # Define order based on Sentinel GUI (adjust as needed per your env)
    order = ['severity', 'query_frequency', 'query_period', 'query', 'enabled', 'suppression_duration', 
             'suppression_enabled', 'trigger_operator', 'trigger_threshold']
    order_dict = {k: idx for idx, k in enumerate(order)}
    pairs.sort(key=lambda p: order_dict.get(p['key'], len(order)))

    # Compute max key length for alignment
    max_key_len = max(len(p['key']) for p in pairs) if pairs else 0

    formatted_lines = []
    for p in pairs:
        padding = ' ' * (max_key_len - len(p['key']))
        if 'content' in p:
            # Heredoc: key = <<-DELIM
            formatted_lines.append(f"{p['indent']}{p['key']}{padding} = {p['value_lines'][0]}")
            # Normalize content indent: subtract min, add 2 spaces
            content_lines = [line for line in p['content'] if line.strip()]  # Ignore blank
            if content_lines:
                min_indent = min(len(line) - len(line.lstrip()) for line in content_lines)
            else:
                min_indent = 0
            for line in p['content']:
                if line.strip():
                    stripped = line.lstrip()
                    rel_indent = ' ' * (len(line) - len(stripped) - min_indent)
                    formatted_lines.append(f"{p['indent']}  {rel_indent}{stripped}")
                else:
                    formatted_lines.append(f"{p['indent']}  ")
            # Indent closing
            formatted_lines.append(f"{p['indent']}  {p['closing']}")
        else:
            # Simple: key = value
            formatted_lines.append(f"{p['indent']}{p['key']}{padding} = {p['value_lines'][0]}")

    return '\n'.join(formatted_lines) + '\n'  # Add newline for block separation

def format_tf_file(filepath: str):
    with open(filepath, 'r') as f:
        content = f.read()
    # Step 1: Add dash to heredocs
    updated = add_dash_to_heredocs(content)
    # Step 2: Split into blocks (resource {} sections)
    blocks = re.split(r'(?<=})\n', updated)
    # Step 3: Format each block
    formatted_blocks = [format_block(block) for block in blocks if block.strip()]
    formatted_content = '\n'.join(formatted_blocks)
    with open(filepath, 'w') as f:
        f.write(formatted_content)
    print("âœ… Updated heredocs, reordered keys, formatted key-value pairs, and indented queries.")

if __name__ == "__main__":
    format_tf_file("sentinel-rules.tf")
